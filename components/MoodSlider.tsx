/**
 * Компонент интерактивного слайдера настроения для Telegram Mini App
 * 
 * Этот компонент предоставляет пользователю возможность выбрать своё текущее настроение
 * из 5 предустановленных состояний с помощью интерактивного слайдера.
 * 
 * Особенности:
 * - 5 позиций настроения (от 0 до 4)
 * - Клик по любой части слайдера для быстрого выбора
 * - Плавные анимации переходов
 * - Текстовые описания для каждого состояния
 * - Callback функция для отслеживания изменений
 * 
 * @author AI Assistant
 * @version 1.0
 */

import React, { useState } from 'react';
import { useI18n } from '../src/hooks/useI18n';

/**
 * Интерфейс пропсов для компонента MoodSlider
 * Определяет входные параметры для настройки поведения слайдера
 */
interface MoodSliderProps {
  /**
   * Начальное значение слайдера (0-4)
   * По умолчанию установлено в позицию 3 (нейтральное состояние)
   * @default 3
   */
  initialValue?: number;
  
  /**
   * Callback функция, вызываемая при изменении значения слайдера
   * Позволяет родительскому компоненту отслеживать изменения настроения
   * @param value - новое значение настроения (0-4)
   */
  onValueChange?: (value: number) => void;
}

/**
 * Массив текстовых описаний для каждой позиции слайдера настроения
 * Индекс массива соответствует значению слайдера (0-4)
 * 
 * Позиции:
 * 0 - Плохое настроение (грусть)
 * 1 - Тревожное состояние  
 * 2 - Нейтральное состояние (по умолчанию)
 * 3 - Энергичное состояние
 * 4 - Счастливое состояние
 */
const moodTextKeys: Array<keyof typeof import('../src/i18n/locales/en.json')['checkin']['moodText']> = [
  'down',
  'anxious',
  'neutral',
  'energized',
  'happy'
];

/**
 * Основной компонент слайдера настроения
 * 
 * Рендерит интерактивный слайдер с текстовым описанием текущего состояния
 * и визуальным прогресс-баром для выбора настроения пользователем.
 * 
 * @param props - объект с пропсами компонента
 * @param props.initialValue - начальное значение слайдера (по умолчанию 3)
 * @param props.onValueChange - callback для отслеживания изменений
 * @returns JSX элемент слайдера настроения
 */
export function MoodSlider({ initialValue = 3, onValueChange }: MoodSliderProps) {
  const { t } = useI18n();
  /**
   * Состояние текущего значения слайдера (0-4)
   * Управляет положением индикатора и отображаемым текстом
   */
  const [value, setValue] = useState(initialValue);
  
  /**
   * Обработчик изменения значения слайдера
   * 
   * Обновляет внутреннее состояние компонента и вызывает callback функцию
   * для уведомления родительского компонента об изменении.
   * 
   * @param newValue - новое значение слайдера (0-4)
   */
  const handleSliderChange = (newValue: number) => {
    // Обновляем внутреннее состояние
    setValue(newValue);
    
    // Уведомляем родительский компонент об изменении (если callback предоставлен)
    onValueChange?.(newValue);
  };

  /**
   * Обработчик клика по слайдеру
   * 
   * Рассчитывает позицию клика относительно ширины слайдера и 
   * преобразует её в соответствующее значение настроения (0-4).
   * 
   * Алгоритм:
   * 1. Получаем координаты клика относительно элемента
   * 2. Вычисляем процентное положение (0-1)
   * 3. Масштабируем до диапазона 0-4
   * 4. Округляем до ближайшего целого числа
   * 5. Ограничиваем значение в допустимых пределах
   * 
   * @param event - событие клика мыши
   */
  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {
    // Получаем границы элемента слайдера
    const rect = event.currentTarget.getBoundingClientRect();
    
    // Вычисляем позицию клика относительно левого края элемента
    const x = event.clientX - rect.left;
    
    // Преобразуем абсолютную позицию в процентное значение (0-1)
    const percentage = x / rect.width;
    
    // Масштабируем процент до диапазона 0-4 (5 позиций)
    const newValue = Math.round(percentage * 4);
    
    // Ограничиваем значение в допустимых пределах (0-4)
    const clampedValue = Math.max(0, Math.min(4, newValue));
    
    // Применяем новое значение
    handleSliderChange(clampedValue);
  };

  /**
   * Вычисление ширины заполненной части слайдера в процентах
   * 
   * Преобразует текущее значение слайдера (0-4) в процентное значение (0-100%)
   * для отображения визуального прогресса на слайдере.
   * 
   * Формула: (текущее_значение / максимальное_значение) * 100%
   * Где максимальное_значение = 4 (позиции 0,1,2,3,4)
   */
  const sliderWidth = (value / 4) * 100; // Процент заполнения от 0% до 100%

  return (
    <div className="w-full">
      {/* === ТЕКСТОВЫЙ ИНДИКАТОР НАСТРОЕНИЯ === */}
      {/* 
        Отображает текстовое описание текущего выбранного настроения.
        Стили взяты из оригинального дизайна Figma для консистентности.
      */}
      <div className="h-[26px] relative shrink-0 w-full mb-5">
        <div className="absolute font-['Kreon:Regular',_sans-serif] font-normal inset-0 leading-[0] text-[#313131] text-[32px] text-left">
          <p className="block leading-[0.8]">
            {/* Отображаем текст, соответствующий текущему значению слайдера */}
            {t(`checkin.moodText.${moodTextKeys[value]}`)}
          </p>
        </div>
      </div>
      
      {/* === ИНТЕРАКТИВНЫЙ СЛАЙДЕР === */}
      {/* 
        Основной визуальный элемент слайдера.
        Состоит из фонового трека (серый) и заполненной части (желтая).
        Поддерживает клики для быстрого выбора позиции.
      */}
      <div 
        className="bg-[#2d2b2b] h-[30px] relative rounded-xl shrink-0 w-full cursor-pointer"
        onClick={handleClick}
        role="slider"
        aria-valuemin={0}
        aria-valuemax={4}
        aria-valuenow={value}
        aria-label={t(`checkin.moodText.${moodTextKeys[value]}`)}
        tabIndex={0}
      >
        {/* === ЗАПОЛНЕННАЯ ЧАСТЬ СЛАЙДЕРА === */}
        {/* 
          Желтая часть слайдера, показывающая текущую позицию.
          Ширина динамически изменяется в зависимости от значения.
          Включает плавную анимацию при изменении позиции.
        */}
        <div
          className="absolute bg-[#e1ff00] h-[30px] left-0 rounded-xl top-0 transition-all duration-300 ease-out"
          style={{ width: `${sliderWidth}%` }}
        >
          {/* === ГРАНИЦА ЗАПОЛНЕННОЙ ЧАСТИ === */}
          {/* 
            Темная граница вокруг заполненной части для визуального разделения.
            Использует pointer-events-none для предотвращения блокировки кликов.
          */}
          <div className="absolute border-2 border-[#2d2b2b] border-solid inset-0 pointer-events-none rounded-xl" />
        </div>
      </div>
    </div>
  );
}